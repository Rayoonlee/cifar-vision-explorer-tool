
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Vulnerability } from '@/types/network';
import { Bug, Shield, AlertTriangle, Info } from 'lucide-react';

interface VulnerabilityScannerProps {
  onVulnerabilityUpdate: (count: number) => void;
}

export const VulnerabilityScanner: React.FC<VulnerabilityScannerProps> = ({ onVulnerabilityUpdate }) => {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: 'CVE-2023-1234',
      severity: 'critical',
      title: 'Remote Code Execution in SSH Service',
      description: 'An authentication bypass vulnerability allows remote code execution',
      cve: 'CVE-2023-1234',
      affectedService: 'SSH',
      solution: 'Update SSH service to latest version',
      host: '192.168.1.100',
      port: 22
    },
    {
      id: 'CVE-2023-5678',
      severity: 'high',
      title: 'SQL Injection in Web Application',
      description: 'SQL injection vulnerability in login form',
      cve: 'CVE-2023-5678',
      affectedService: 'HTTP',
      solution: 'Apply security patches and input validation',
      host: '192.168.1.150',
      port: 80
    },
    {
      id: 'WEAK-SSL',
      severity: 'medium',
      title: 'Weak SSL/TLS Configuration',
      description: 'Server supports deprecated SSL protocols',
      affectedService: 'HTTPS',
      solution: 'Disable SSLv3 and TLS 1.0, use TLS 1.2+',
      host: '192.168.1.1',
      port: 443
    },
    {
      id: 'OPEN-PORT',
      severity: 'low',
      title: 'Unnecessary Open Port',
      description: 'Port 3389 (RDP) is open to network',
      affectedService: 'RDP',
      solution: 'Close unnecessary ports or restrict access',
      host: '192.168.1.100',
      port: 3389
    }
  ];

  useEffect(() => {
    onVulnerabilityUpdate(vulnerabilities.length);
  }, [vulnerabilities, onVulnerabilityUpdate]);

  const startVulnerabilityScan = async () => {
    setIsScanning(true);
    setScanProgress(0);

    // Simulate scanning progress
    for (let i = 0; i <= 100; i += 5) {
      await new Promise(resolve => setTimeout(resolve, 100));
      setScanProgress(i);
    }

    setVulnerabilities(mockVulnerabilities);
    setIsScanning(false);
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="destructive" className="bg-red-100 text-red-800">Critical</Badge>;
      case 'high':
        return <Badge variant="destructive" className="bg-orange-100 text-orange-800">High</Badge>;
      case 'medium':
        return <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">Medium</Badge>;
      case 'low':
        return <Badge variant="outline" className="bg-blue-100 text-blue-800">Low</Badge>;
      default:
        return <Badge variant="outline">Info</Badge>;
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'medium':
        return <Bug className="h-4 w-4 text-yellow-500" />;
      default:
        return <Info className="h-4 w-4 text-blue-500" />;
    }
  };

  const severityCounts = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  return (
    <div className="space-y-6">
      {/* Vulnerability Scanner */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bug className="h-5 w-5" />
            Vulnerability Scanner
          </CardTitle>
          <CardDescription>Scan for known security vulnerabilities</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Button
            onClick={startVulnerabilityScan}
            disabled={isScanning}
            className="flex items-center gap-2"
          >
            <Shield className="h-4 w-4" />
            {isScanning ? 'Scanning for Vulnerabilities...' : 'Start Vulnerability Scan'}
          </Button>

          {isScanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Vulnerability scan progress</span>
                <span>{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Vulnerability Summary */}
      {vulnerabilities.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Critical</p>
                  <p className="text-2xl font-bold text-red-600">{severityCounts.critical || 0}</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-red-500" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">High</p>
                  <p className="text-2xl font-bold text-orange-600">{severityCounts.high || 0}</p>
                </div>
                <AlertTriangle className="h-8 w-8 text-orange-500" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Medium</p>
                  <p className="text-2xl font-bold text-yellow-600">{severityCounts.medium || 0}</p>
                </div>
                <Bug className="h-8 w-8 text-yellow-500" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Low</p>
                  <p className="text-2xl font-bold text-blue-600">{severityCounts.low || 0}</p>
                </div>
                <Info className="h-8 w-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Vulnerability List */}
      {vulnerabilities.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Details ({vulnerabilities.length})</CardTitle>
            <CardDescription>Identified security vulnerabilities</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Severity</TableHead>
                  <TableHead>Title</TableHead>
                  <TableHead>Host</TableHead>
                  <TableHead>CVE</TableHead>
                  <TableHead>Service</TableHead>
                  <TableHead>Solution</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {vulnerabilities.map((vuln) => (
                  <TableRow key={vuln.id}>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        {getSeverityIcon(vuln.severity)}
                        {getSeverityBadge(vuln.severity)}
                      </div>
                    </TableCell>
                    <TableCell className="max-w-xs">
                      <div>
                        <p className="font-medium">{vuln.title}</p>
                        <p className="text-sm text-muted-foreground">{vuln.description}</p>
                      </div>
                    </TableCell>
                    <TableCell className="font-mono">{vuln.host}</TableCell>
                    <TableCell>{vuln.cve || '-'}</TableCell>
                    <TableCell>{vuln.affectedService}</TableCell>
                    <TableCell className="max-w-xs text-sm">{vuln.solution}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
